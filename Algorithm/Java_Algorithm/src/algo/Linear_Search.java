package algo;
import java.util.*;


public class Linear_Search 
{
	/*
	선형 탐색(Linear Search)
	- 배열이나 리스트의 처음부터 끝까지 하나씩 값을 비교하면서 찾는 값을 찾을 때까지 탐색하는 방법
	- '정렬이 되지 않은 상태'의 배열/리스트에서 값을 찾기 위한 탐색에 사용
	* 이진 탐색 = 정렬이 된 상태에서 사용


	- 동작과정
	1. 배열/리스트를 순회합니다.
	2. 배열/리스트를 순회하면서 하나씩 값을 비교합니다.
	3. 원하는 값을 찾는 경우 순회를 멈추고 값을 반환합니다.
	
	
	- 선형 탐색과 이진 탐색의 차이점
	- 일반적으로 특정 값을 탐색하고자 할 때 값을 찾는 방법은 ‘이진 탐색’을 이용하는 것이 ‘선형 탐색’보다 더 빠릅니다.
	- 이진 탐색은 정렬된 배열에서 원하는 값을 찾는 알고리즘이며, 중간값을 찾아 탐색 범위를 반으로 줄이면서 값을 찾아갑니다.
	- 이에 비해 선형탐색은 배열 전체를 순회하면서 값을 찾기 때문에 배열의 크기와 상관없이 속도가 일정하게 증가합니다.
	
	
	- 선형 탐색과 순차적 탐색의 차이점
	- 선형 탐색과 순차적 탐색은 동일한 의미로 사용됩니다.
	- 선형 탐색의 경우 찾고자 하는 값이 나오지 않으면 종료가 되지만 순차적 탐색의 경우는 반복을 멈추지 않고 값이 나올 때까지 반복합니다.
	
	
	- 선형 탐색의 사용처
	- 데이터의 크기가 작거나 정렬되어 있지 않은 경우에 주로 사용
	- (ex)10개 이하의 원소로 이루어진 리스트에서 값을 찾을 때는 선형 탐색이 효율적
	- 데이터의 크기가 커지면 검색 속도가 급격히 느려지므로, 큰 데이터셋에서는 다른 탐색 알고리즘을 사용하는 것이 좋습니다.
	
	
	- 선형 탐색의 성능
	- 선형 탐색의 경우 시간 복잡도의 ‘빅오 표기법’을 이용하여 확인하였을때 선형 시간인 O(n)으로써 이진 탐색보다는 느리지만 상대적으로 빠른 속도
	*/
	
	/*
	선형 탐색 예시1 - 배열 내의 숫자 찾는 예시
	- 파라미터로 배열 ‘arr’와 값 ‘x’를 받았을때, 배열을 순회하면서 요소 중 ‘x’에 해당하는 값을 찾았을 경우 반환하며, 찾지 못한 경우는 -1을 반환하는 함수
	*/
	public static int linearSearch(int[] arr, int x) 
	{
	    int n = arr.length;
	    
	    for (int i = 0; i < n; i++) 
	    {
	        if (arr[i] == x) 
	        {
	            return i;
	        }
	    }
	    return -1;
	}
	
	
	/*
	선형 탐색 예시2 - 배열 내의 문자열 찾는 예시
	- 파라미터로 배열 ‘arr’와 값 ‘target’을 받았을 때, 배열을 순회하면서 요소 중 ‘x’에 해당하는 값을 찾았을 경우 반환하며, 찾지 못한 경우는 -1을 반환
	*/
	public static int linearSearch(String[] arr, String target) 
	{
	    for (int i = 0; i < arr.length; i++) 
	    {
	        if (arr[i].equals(target)) 
	        {
	            return i;
	        }
	    }
	    return -1;
	}	
		

	public static void main(String[] args) 
	{

	}

}
